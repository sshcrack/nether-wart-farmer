package me.sshcrack.netherwarts.old;

import me.sshcrack.netherwarts.MainMod;
import me.sshcrack.netherwarts.MessageManager;
import me.sshcrack.netherwarts.manager.inv.baic.InvState;
import net.minecraft.client.MinecraftClient;
import net.minecraft.client.gui.screen.ingame.InventoryScreen;
import net.minecraft.client.network.ClientPlayerEntity;
import net.minecraft.entity.player.PlayerInventory;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraft.item.Items;
import net.minecraft.screen.ScreenHandler;
import net.minecraft.screen.slot.Slot;
import net.minecraft.util.Formatting;
import net.minecraft.util.collection.DefaultedList;
import net.minecraft.util.math.Vec2f;

import java.util.OptionalInt;

public class InventoryManagerBk {
    private final ClientPlayerEntity player;

    // Constants taken from net.minecraft.client.gui.screen.ingame.HandledScreen.backgroundWidth
    protected int backgroundWidth = 176;
    // Constants taken from net.minecraft.client.gui.screen.ingame.HandledScreen.backgroundHeight
    protected int backgroundHeight = 166;

    private int currTick = 1;

    private InventoryScreen screen;
    private InvState state = InvState.Opening;

    public InventoryManagerBk(ClientPlayerEntity player) {
        this.player = player;
    }

    private Vec2f getCoordinatesAt(InventoryScreen screen, Slot slot) {
        int i = (screen.width - backgroundWidth) / 2;
        int j = (screen.height - backgroundHeight) / 2;

        // Width/Height straight up copied too.
        int width = 16;
        int height = 16;

        float mouseXOut = slot.x + ((float) width) / 2 + i;
        float mouseYOut = slot.y + ((float) height) / 2 + j;

        return new Vec2f(mouseXOut, mouseYOut);
    }


    public boolean scrollToHoe(int hotbarSlot) {
        return moveItemStates(Items.DIAMOND_HOE, hotbarSlot);
    }

    //Returns if done
    public boolean tickScrollWart(int hotbarSlot) {
        return moveItemStates(Items.NETHER_WART, hotbarSlot);
    }

    public int getSlotsFree() {
        DefaultedList<ItemStack> main = player.getInventory().main;
        int slotsFree = 0;

        for (ItemStack stack : main) {
            if(stack.isOf(Items.AIR))
                slotsFree++;
        }

        return slotsFree;
    }

    private boolean moveItemStates(Item kind, int hotbarSlot) {
        int destinationSlot = 36 + hotbarSlot;
        ScreenHandler handler = player.currentScreenHandler;

        ItemStack initialStack = player.getInventory().main.get(hotbarSlot);
        if(initialStack.isOf(kind))
            return true;


        if(state == InvState.Opening) {
            screen = new InventoryScreen(player);
            MinecraftClient.getInstance().setScreen(screen);

            state = InvState.MovingSource;
            return false;
        }

        if(state == InvState.MovingSource) {

            state = InvState.MovingDest;
            return false;
        }

        if(state == InvState.MovingDest) {
            Slot dest = handler.getSlot(destinationSlot);
            Vec2f end = getCoordinatesAt(screen, dest);

            screen.mouseClicked(end.x, end.y, 0);
            screen.mouseReleased(end.x, end.y, 0);
            state = InvState.Closing;

            currTick = 1;
            return false;
        }

        if(state == InvState.Closing) {
            currTick++;

            if(currTick % 20 == 0) {
                player.getInventory().selectedSlot = hotbarSlot;

                screen.close();
                state = InvState.Opening;
                return true;
            }

            return false;
        }

        MainMod.LOGGER.error("Invalid State {}", state);
        return false;
    }
}
